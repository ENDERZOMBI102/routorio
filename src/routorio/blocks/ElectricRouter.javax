package routorio.blocks;

import arc.*;
import arc.math.*;
import arc.scene.style.*;
import arc.scene.ui.layout.*;
import arc.util.io.*;
import mindustry.*;
import mindustry.gen.*;
import mindustry.type.*;
import mindustry.ui.*;
import mindustry.world.blocks.distribution.*;

public class ElectricRouter extends DuctRouter {
	// lower 13 bits
	private static short maxNumber = 0x1fff;

	private Drawable background;
	private Drawable[] modeButtons, opButtons;

	public ElectricRouter(String name) {
		super(name);

		consumePower(maxNumber);

		hasPower = true;
		consumesPower = true;
		outputsPower = true;
		configurable = true;
		saveConfig = true;

		config(Short.class, ElectricRouterBuild::load);
	}

	@Override
	public void load() {
		super.load();

		background = drawable("router");

		modeButtons = new Drawable[] {
			drawable("routorio-button-buffer"),
			drawable("routorio-button-rate")
		};

		opButtons = new Drawable[] {
			drawable("routorio-button-equals"),
			drawable("routorio-button-not"),
			drawable("routorio-button-greater"),
			drawable("routorio-button-less")
		};
	}

	private static Drawable drawable(String name) {
		return new TextureRegionDrawable(Core.atlas.find(name));
	}

	public class ElectricRouterBuild extends DuctRouterBuild {
		private byte mode = 0;
		private byte operation = 0;
		private short number = maxNumber;

		private boolean active() {
			short other = (short) getPowerValue();
			return switch (operation) {
				case 0b00 -> other == number;
				case 0b01 -> other != number;
				case 0b10 -> other > number;
				case 0b11 -> other < number;
			};
		}

		private float getPowerValue() {
			return mode == 0
				? power.status * maxNumber
				: power.graph.getPowerBalance() * 60f;
		}

		private void load(short raw) {
			// upper bit is mode
			mode = (byte) (raw >> 15);
			// next 2 bits are op
			operation = (byte) ((raw >> 13) & 0b11);
			// lower 13 bits are the number
			number = (short) (raw & maxNumber);
		}

		@Override
		public void updateTile() {
			if (active()) {
				super.updateTile();
			}
		}

		@Override
		public void buildConfiguration(Table parent) {
			Table table = parent.fill();
			table.background(background);

			// Cycle through modes
			var modeb = table.button(modeButtons[mode], Styles.cleari, () -> {
				mode = (byte) ((mode + 1) % 2);
				modeb.style.imageUp = modeButtons[mode];
				configure(config());
			}).size(40).get();

			// Cycle through operations
			var opb = table.button(opButtons[operation], Styles.cleari, () -> {
				operation = (byte) ((operation + 1) % 4);
				opb.style.imageUp = opButtons[operation];
				configure(config());
			}).size(40).get();

			var numberf = table.field(String.valueOf(number), text -> {
				try {
					int set = Integer.parseInt(text);
					set = Mathf.clamp(0, set, maxNumber);
					numberf.text = set.toString();
					number = (short) set;
					configure(config());
				} catch (Exception e) {}
			}).width(120).get();
		}

		@Override
		public Short config() {
			return ((short) mode) << 15
				| ((short) operation) << 13
				| number;
		}

		@Override
		public void write(Writes write) {
			write.s(config());
		}

		@Override
		public void read(Reads read, byte revision) {
			super.read(read, revision);
			load(read.s());
		}
	}
}
